generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model brand {
  brand_id     Int       @id @default(autoincrement())
  brand_name   String    @unique(map: "unique_brand_name") @db.VarChar(100)
  slug         String?
  date_created DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  product      product[]
}

model category {
  category_id   Int       @id @default(autoincrement())
  category_name String    @unique(map: "unique_category_name") @db.VarChar(100)
  slug          String?
  date_created  DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  product       product[]
}

model product {
  product_id   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  product_name String    @db.VarChar(200)
  brand_id     Int
  category_id  Int
  description  String?
  image_url    String[]
  laptop       laptop[]
  monitor      monitor[]
  brand        brand     @relation(fields: [brand_id], references: [brand_id], onDelete: NoAction, onUpdate: NoAction)
  category     category  @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  ram          ram[]
}

model laptop {
  laptop_id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  product_id             String   @db.Uuid
  laptop_model           String
  cpu                    String
  gpu                    String
  ram_installed          Int
  ram_type               String
  frequency_mhz          Int
  ram_slots              Int
  max_ram                Int
  refresh_rate           Int
  panel                  String
  screen_size            Float
  resolution             String
  monitor_tech           String?
  sound_tech             String?
  os                     String
  battery_wh             Int?
  weight_kg              Float?
  wifi_version           String?
  bluetooth_version      String?
  ports                  Json?
  storage_installed_gbs  Int
  storage_installed_type String
  storage_slots          Int
  storage_slots_type     String[]
  max_storage            String?
  price                  Float
  qty_in_stock           Int?
  product                product  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
}

model tester {
  id          Int      @id @default(autoincrement())
  array_stuff String[]
}

model monitor {
  monitor_id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  monitor_name       String  @db.VarChar(255)
  monitor_model      String  @db.VarChar(100)
  panel              String  @db.VarChar(50)
  brightness_nits    Int
  response_time_ms   Float   @db.Real
  bit_depth          String  @db.VarChar(50)
  color_range        String  @db.VarChar(100)
  resolution         String  @db.VarChar(50)
  screen_size_inches Float   @db.Real
  refresh_rate_hz    Int
  ports              Json
  vesa_mount         String  @db.VarChar(50)
  monitor_tech       String  @db.VarChar(100)
  in_box_component   String
  voltage            String  @db.VarChar(50)
  weight_kg          Float   @db.Real
  product_id         String  @db.Uuid
  product            product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "fk_monitor")
}

model ram {
  ram_id        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ram_model     String
  ram_type      String
  capacity_gb   Int
  frequency_mhz Int
  voltage       Float   @db.Real
  latency       String
  price         Float   @db.Real
  product_id    String  @db.Uuid
  ram_name      String
  product       product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "fk_ram")
}
